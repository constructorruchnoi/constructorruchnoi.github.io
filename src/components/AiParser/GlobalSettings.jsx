import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Typography,
  Box,
  FormControlLabel,
  Checkbox
} from '@mui/material';
import TuneIcon from '@mui/icons-material/Tune';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ —Å–∞–π—Ç–æ–≤
export const WEBSITE_THEMES = {
  LAW: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
  MEDICAL: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞',
  CONSTRUCTION: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
  EDUCATION: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
  REAL_ESTATE: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
  RESTAURANT: '–†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ',
  BEAUTY: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
  AUTO: '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å',
  RETAIL: '–ú–∞–≥–∞–∑–∏–Ω/–¢–æ—Ä–≥–æ–≤–ª—è',
  CUSTOM: '–î—Ä—É–≥–æ–µ'
};

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
export const LANGUAGES = {
  RU: '–†—É—Å—Å–∫–∏–π (ru)',
  EN: 'English (en)',
  ES: 'Espa√±ol (es)',
  FR: 'Fran√ßais (fr)',
  DE: 'Deutsch (de)',
  IT: 'Italiano (it)',
  PT: 'Portugu√™s (pt)',
  NL: 'Nederlands (nl)',
  PL: 'Polski (pl)',
  AR: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (ar)',
  ZH: '‰∏≠Êñá (zh)',
  JA: 'Êó•Êú¨Ë™û (ja)',
  KO: 'ÌïúÍµ≠Ïñ¥ (ko)',
  TR: 'T√ºrk√ße (tr)',
  HE: '◊¢◊ë◊®◊ô◊™ (he)',
  HI: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (hi)',
  UK: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)',
  BE: '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è (be)',
  CS: 'ƒåe≈°tina (cs)',
  DA: 'Dansk (da)',
  FI: 'Suomi (fi)',
  EL: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨ (el)',
  HU: 'Magyar (hu)',
  NO: 'Norsk (no)',
  RO: 'Rom√¢nƒÉ (ro)',
  SV: 'Svenska (sv)',
  TH: '‡πÑ‡∏ó‡∏¢ (th)',
  VI: 'Ti·∫øng Vi·ªát (vi)',
  BG: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ (bg)',
  SR: '–°—Ä–ø—Å–∫–∏ (sr)',
  SK: 'Slovenƒçina (sk)',
  SL: 'Sloven≈°ƒçina (sl)',
  CUSTOM: '–î—Ä—É–≥–æ–π —è–∑—ã–∫ –ø–æ –∫–æ–¥—É ISO 639-1'
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const CONTENT_STYLES = {
  FORMAL: '–§–æ—Ä–º–∞–ª—å–Ω—ã–π',
  CASUAL: '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π',
  PROFESSIONAL: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
  FRIENDLY: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π'
};

const GlobalSettings = ({ open, onClose, settings, onSettingsChange }) => {
  const handleChange = (field, value) => {
    onSettingsChange({
      ...settings,
      [field]: value
    });
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: { 
          marginTop: '40px',
          minHeight: '500px'
        }
      }}
    >
      <DialogTitle sx={{ 
        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',
        display: 'flex',
        alignItems: 'center',
        gap: 1
      }}>
        <TuneIcon /> –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      </DialogTitle>
      <DialogContent sx={{ pt: 5 }}>
        <Grid container spacing={2} sx={{ mt: 4 }}>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–¢–µ–º–∞—Ç–∏–∫–∞ —Å–∞–π—Ç–∞</InputLabel>
              <Select
                value={settings.theme}
                onChange={(e) => handleChange('theme', e.target.value)}
                label="–¢–µ–º–∞—Ç–∏–∫–∞ —Å–∞–π—Ç–∞"
              >
                {Object.entries(WEBSITE_THEMES).map(([key, value]) => (
                  <MenuItem key={key} value={key}>{value}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {settings.theme === 'CUSTOM' && (
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–°–≤–æ—è —Ç–µ–º–∞—Ç–∏–∫–∞"
                value={settings.customTheme}
                onChange={(e) => handleChange('customTheme', e.target.value)}
              />
            </Grid>
          )}

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</InputLabel>
              <Select
                value={settings.language}
                onChange={(e) => handleChange('language', e.target.value)}
                label="–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
              >
                {Object.entries(LANGUAGES).map(([key, value]) => (
                  <MenuItem key={key} value={key}>{value}</MenuItem>
                ))}
              </Select>
            </FormControl>
            {settings.language === 'CUSTOM' && (
              <TextField
                fullWidth
                sx={{ mt: 2 }}
                label="–í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (ISO 639-1)"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ru, en, fr, de, es..."
                value={settings.customLanguage || ''}
                onChange={(e) => handleChange('customLanguage', e.target.value.toLowerCase().substring(0, 2))}
                helperText="–ü—Ä–∏–º–µ—Ä: ru - —Ä—É—Å—Å–∫–∏–π, en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, es - –∏—Å–ø–∞–Ω—Å–∫–∏–π"
                inputProps={{ maxLength: 2 }}
              />
            )}
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–°—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞</InputLabel>
              <Select
                value={settings.contentStyle}
                onChange={(e) => handleChange('contentStyle', e.target.value)}
                label="–°—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
              >
                {Object.entries(CONTENT_STYLES).map(([key, value]) => (
                  <MenuItem key={key} value={key}>{value}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12}>
            <Typography 
              variant="body2" 
              sx={{ 
                color: 'red', 
                fontWeight: 'bold', 
                mb: 1 
              }}
            >
              –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —è–∑—ã–∫ –∏–∑ –ó–∞–∫–∞–∑–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–∞–Ω–∞ –†–æ—Å—Å–∏—è —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π
            </Typography>
            <TextField
              fullWidth
              multiline
              rows={2}
              label="–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–∞–Ω–∞ –†–æ—Å—Å–∏—è —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
              value={settings.additionalKeywords}
              onChange={(e) => handleChange('additionalKeywords', e.target.value)}
              sx={{
                '& .MuiInputBase-input': {
                  color: 'red'
                }
              }}
            />
            
            <Box sx={{ 
              mt: 2, 
              p: 2, 
              backgroundColor: '#f5f5f5', 
              borderRadius: 2,
              border: '1px solid #e0e0e0'
            }}>
              <Typography variant="h6" sx={{ mb: 1, color: '#1976d2', fontWeight: 'bold' }}>
                üìã –ü–æ—à–∞–≥–æ–≤—ã–π –≥–∞–π–¥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:
              </Typography>
              <Box component="ol" sx={{ pl: 2, m: 0 }}>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>–í–≤–µ—Å—Ç–∏ —Ç–µ–º–∞—Ç–∏–∫—É —Å–∞–π—Ç–∞</strong> - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</strong> - —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 0 }}>
                  <strong>–í –∫–ª—é—á–µ–≤—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É:</strong>
                  <br />
                  <Typography 
                    variant="body2" 
                    component="span" 
                    sx={{ 
                      color: '#d32f2f',
                      fontWeight: 'bold',
                      animation: 'pulse 2s infinite',
                      '@keyframes pulse': {
                        '0%': { opacity: 1 },
                        '50%': { opacity: 0.7 },
                        '100%': { opacity: 1 }
                      }
                    }}
                  >
                    –°—Ç—Ä–∞–Ω–∞ ‚Üí –Ø–∑—ã–∫ —Å–∞–π—Ç–∞ ‚Üí –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                  </Typography>
                </Typography>
              </Box>
              <Typography 
                variant="body2" 
                sx={{ 
                  mt: 1, 
                  fontStyle: 'italic', 
                  color: '#666'
                }}
              >
                –ü—Ä–∏–º–µ—Ä: "—Å—Ç—Ä–∞–Ω–∞ –ì–µ—Ä–º–∞–Ω–∏—è, —è–∑—ã–∫ –Ω–µ–º–µ—Ü–∫–∏–π, –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ, —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å"
              </Typography>
            </Box>
          </Grid>




        </Grid>
      </DialogContent>
      <DialogActions sx={{ borderTop: '1px solid rgba(0, 0, 0, 0.12)', p: 2 }}>
        <Button onClick={onClose}>–û—Ç–º–µ–Ω–∞</Button>
        <Button 
          variant="contained" 
          onClick={onClose}
          color="primary"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default GlobalSettings; 