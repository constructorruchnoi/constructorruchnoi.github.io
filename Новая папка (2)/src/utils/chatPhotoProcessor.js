import fs from 'fs';
import path from 'path';
import sharp from 'sharp';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export const getRandomOperatorPhoto = async () => {
  try {
    console.log('üé≠ Selecting random operator photo...');
    
    const chatImagesDir = path.join(process.cwd(), 'public', 'images', 'chat');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if (!fs.existsSync(chatImagesDir)) {
      console.warn('‚ùå Chat images directory not found');
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ
    const files = fs.readdirSync(chatImagesDir);
    const imageFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.jpg', '.jpeg', '.png', '.webp', '.jfif'].includes(ext) && file !== 'operator.jpg';
    });

    if (imageFiles.length === 0) {
      console.warn('‚ùå No images found in chat directory');
      return null;
    }

    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ
    const randomIndex = Math.floor(Math.random() * imageFiles.length);
    const selectedFile = imageFiles[randomIndex];
    const selectedPath = path.join(chatImagesDir, selectedFile);

    console.log(`üé≤ Selected random photo: ${selectedFile}`);

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
    const optimizedBuffer = await sharp(selectedPath)
      .resize(64, 64, {
        fit: 'cover',
        position: 'center'
      })
      .jpeg({
        quality: 90,
        progressive: true
      })
      .toBuffer();

    console.log(`‚úÖ Photo optimized: ${optimizedBuffer.length} bytes`);

    return {
      buffer: optimizedBuffer,
      originalFile: selectedFile,
      size: optimizedBuffer.length
    };

  } catch (error) {
    console.error('‚ùå Error processing operator photo:', error);
    return null;
  }
}; 