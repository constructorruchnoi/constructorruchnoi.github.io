import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Alert,
  AlertTitle,
  Button,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  Storage as StorageIcon,
  Delete as DeleteIcon,
  Info as InfoIcon,
  Refresh as RefreshIcon,
  Download as DownloadIcon
} from '@mui/icons-material';

const ImageCacheStats = ({ onRefresh }) => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [detailsDialog, setDetailsDialog] = useState(false);

  const loadStats = async () => {
    setLoading(true);
    try {
      const { imageCacheService } = await import('../../../utils/imageCacheService');
      const cacheStats = await imageCacheService.getCacheStats();
      setStats(cacheStats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadStats();
  }, []);

  const handleClearCache = async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      setLoading(true);
      try {
        const { imageCacheService } = await import('../../../utils/imageCacheService');
        await imageCacheService.clearAll();
        await loadStats();
        if (onRefresh) onRefresh();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
      } finally {
        setLoading(false);
      }
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 –ë';
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  if (!stats) {
    return (
      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="body2" color="text.secondary">
            –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞...
          </Typography>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <StorageIcon color="primary" />
              <Typography variant="h6">
                –ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Tooltip title="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É">
                <IconButton 
                  size="small" 
                  onClick={loadStats}
                  disabled={loading}
                >
                  <RefreshIcon />
                </IconButton>
              </Tooltip>
              <Tooltip title="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏">
                <IconButton 
                  size="small" 
                  onClick={() => setDetailsDialog(true)}
                >
                  <InfoIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>

          <Box sx={{ display: 'flex', gap: 2, mb: 2, flexWrap: 'wrap' }}>
            <Chip 
              label={`${stats.totalImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`}
              color="primary"
              variant="outlined"
            />
            <Chip 
              label={`${stats.totalSizeMB} –ú–ë`}
              color="secondary"
              variant="outlined"
            />
            <Chip 
              label="JPG —Ñ–æ—Ä–º–∞—Ç"
              color="success"
              variant="outlined"
            />
          </Box>

          {stats.totalImages > 0 ? (
            <Alert severity="info" sx={{ mb: 2 }}>
              <AlertTitle>‚úÖ –ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</AlertTitle>
              <Typography variant="body2">
                –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ JPG –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ (IndexedDB + LocalStorage). 
                –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.
              </Typography>
            </Alert>
          ) : (
            <Alert severity="warning">
              <AlertTitle>üìÅ –ö–µ—à –ø—É—Å—Ç</AlertTitle>
              <Typography variant="body2">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–µ—à–µ –±—Ä–∞—É–∑–µ—Ä–∞.
              </Typography>
            </Alert>
          )}

          {stats.totalImages > 0 && (
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button
                variant="outlined"
                size="small"
                startIcon={<DeleteIcon />}
                onClick={handleClearCache}
                disabled={loading}
                color="error"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
              </Button>
              <Button
                variant="outlined"
                size="small"
                startIcon={<InfoIcon />}
                onClick={() => setDetailsDialog(true)}
                disabled={loading}
              >
                –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </Button>
            </Box>
          )}
        </CardContent>
      </Card>

      {/* –î–∏–∞–ª–æ–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ */}
      <Dialog 
        open={detailsDialog} 
        onClose={() => setDetailsDialog(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <InfoIcon />
            –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–µ—à–µ ({stats.totalImages})
          </Box>
        </DialogTitle>
        <DialogContent>
          {stats.images.length > 0 ? (
            <List>
              {stats.images.map((image, index) => (
                <ListItem key={index} divider>
                  <ListItemText
                    primary={image.key}
                    secondary={
                      <Box>
                        <Typography variant="body2">
                          –†–∞–∑–º–µ—Ä: {formatFileSize(image.size)}
                        </Typography>
                        {image.metadata && (
                          <>
                            <Typography variant="body2">
                              –ö–∞—Ä—Ç–æ—á–∫–∞: {image.metadata.cardTitle || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </Typography>
                            <Typography variant="body2">
                              ID –∫–∞—Ä—Ç–æ—á–∫–∏: {image.metadata.cardId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </Typography>
                            <Typography variant="body2">
                              –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {formatDate(image.metadata.uploadDate)}
                            </Typography>
                            {image.metadata.width && image.metadata.height && (
                              <Typography variant="body2">
                                –†–∞–∑–º–µ—Ä—ã: {image.metadata.width}√ó{image.metadata.height}px
                              </Typography>
                            )}
                            <Typography variant="body2">
                              –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {image.metadata.originalName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </Typography>
                          </>
                        )}
                      </Box>
                    }
                  />
                  <ListItemSecondaryAction>
                    <Chip 
                      label="JPG" 
                      size="small" 
                      color="success" 
                      variant="outlined"
                    />
                  </ListItemSecondaryAction>
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography variant="body2" color="text.secondary">
              –ö–µ—à –ø—É—Å—Ç
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDetailsDialog(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ImageCacheStats; 