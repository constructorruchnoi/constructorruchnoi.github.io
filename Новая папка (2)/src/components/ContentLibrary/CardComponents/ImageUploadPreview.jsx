import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  IconButton,
  Chip,
  Alert,
  AlertTitle,
  CircularProgress,
  Paper,
  Button
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import ImageIcon from '@mui/icons-material/Image';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import RefreshIcon from '@mui/icons-material/Refresh';
import { imageCacheService } from '../../../utils/imageCacheService';

const ImageUploadPreview = ({ onImageSelect, selectedImageUrl, onUploadNew, cardId, cardTitle }) => {
  const [cachedImages, setCachedImages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    loadCachedImages();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const handleImageUploaded = () => {
      setUploading(true);
      loadCachedImages().finally(() => {
        setUploading(false);
      });
    };
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    const handleImageCacheCleared = () => {
      setCachedImages([]);
    };
    
    window.addEventListener('imageUploaded', handleImageUploaded);
    window.addEventListener('imageCacheCleared', handleImageCacheCleared);
    
    return () => {
      window.removeEventListener('imageUploaded', handleImageUploaded);
      window.removeEventListener('imageCacheCleared', handleImageCacheCleared);
    };
  }, []);

  const loadCachedImages = async () => {
    try {
      if (!loading) setLoading(true);
      const images = [];
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
      const allMetadata = imageCacheService.getAllMetadata();
      
      console.log('[ImageUploadPreview] –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', allMetadata);
      console.log('[ImageUploadPreview] –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è cardId:', cardId);
      
      // –ï—Å–ª–∏ cardId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ
      if (!cardId) {
        console.log('[ImageUploadPreview] cardId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        setCachedImages([]);
        return;
      }
      
      for (const [key, metadata] of Object.entries(allMetadata)) {
        if (metadata && metadata.fileName && metadata.cardId) {
          console.log('[ImageUploadPreview] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', {
            fileName: metadata.fileName,
            metadataCardId: metadata.cardId,
            currentCardId: cardId,
            match: metadata.cardId === cardId
          });
          
          // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ cardId —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
          if (metadata.cardId === cardId) {
            const blob = await imageCacheService.getImage(metadata.fileName);
            if (blob) {
              console.log('[ImageUploadPreview] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ:', metadata.fileName);
              
              images.push({
                fileName: metadata.fileName,
                url: URL.createObjectURL(blob),
                metadata: metadata,
                isForThisCard: true,
                format: metadata.format || 'jpg',
                size: metadata.size,
                dimensions: metadata.width && metadata.height ? `${metadata.width}√ó${metadata.height}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
              });
            } else {
              console.log('[ImageUploadPreview] ‚ùå Blob –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', metadata.fileName);
            }
          } else {
            console.log('[ImageUploadPreview] ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ù–ï –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ:', {
              fileName: metadata.fileName,
              metadataCardId: metadata.cardId,
              currentCardId: cardId
            });
          }
        } else {
          console.log('[ImageUploadPreview] ‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata);
        }
      }
      
      console.log(`[ImageUploadPreview] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}`);
      setCachedImages(images);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleImageDelete = async (fileName) => {
    try {
      await imageCacheService.deleteImage(fileName);
      // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∫–ª—é—á—É
      imageCacheService.deleteMetadata(`site-images-metadata-${fileName}`);
      await loadCachedImages(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
  };

  const handleImageSelect = (image) => {
    if (onImageSelect) {
      onImageSelect(image.url, image.fileName, image.metadata);
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (uploading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 2, flexDirection: 'column', alignItems: 'center' }}>
        <CircularProgress size={24} sx={{ mb: 1 }} />
        <Typography variant="caption" color="text.secondary">
          –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...
        </Typography>
      </Box>
    );
  }

  if (cachedImages.length === 0) {
    return (
      <Box>
        <Alert severity="info" sx={{ mb: 2 }}>
          <AlertTitle>üìÅ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏</AlertTitle>
          <Typography variant="body2">
            –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å –∑–¥–µ—Å—å.
          </Typography>
        </Alert>
        {onUploadNew && (
          <Button
            variant="outlined"
            startIcon={<CloudUploadIcon />}
            onClick={onUploadNew}
            fullWidth
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
          </Button>
        )}
      </Box>
    );
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
        <Typography variant="subtitle2">
          –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ ({cachedImages.length}):
        </Typography>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <IconButton
            size="small"
            onClick={loadCachedImages}
            title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
          >
            <RefreshIcon />
          </IconButton>
          {onUploadNew && (
            <Button
              variant="outlined"
              startIcon={<CloudUploadIcon />}
              onClick={onUploadNew}
              size="small"
            >
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ
            </Button>
          )}
        </Box>
      </Box>
      
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
        {cachedImages.map((image) => (
          <Paper
            key={image.fileName}
            sx={{
              position: 'relative',
              width: 100,
              height: 80,
              overflow: 'hidden',
              cursor: 'pointer',
              border: selectedImageUrl === image.url ? '2px solid #1976d2' : 
                      image.isForThisCard ? '2px solid #4caf50' : '1px solid #e0e0e0',
              '&:hover': {
                borderColor: '#1976d2'
              }
            }}
            onClick={() => handleImageSelect(image)}
          >
            <img
              src={image.url}
              alt={image.metadata.originalName}
              style={{
                width: '100%',
                height: '100%',
                objectFit: 'cover'
              }}
            />
            
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
            <IconButton
              size="small"
              onClick={(e) => {
                e.stopPropagation();
                handleImageDelete(image.fileName);
              }}
              sx={{
                position: 'absolute',
                top: 2,
                right: 2,
                backgroundColor: 'rgba(255,255,255,0.8)',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,1)'
                }
              }}
            >
              <DeleteIcon fontSize="small" />
            </IconButton>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ */}
            {selectedImageUrl === image.url && (
              <Box
                sx={{
                  position: 'absolute',
                  top: 2,
                  left: 2,
                  backgroundColor: '#1976d2',
                  color: 'white',
                  borderRadius: '50%',
                  width: 16,
                  height: 16,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '10px'
                }}
              >
                ‚úì
              </Box>
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–µ */}
            {image.isForThisCard && selectedImageUrl !== image.url && (
              <Box
                sx={{
                  position: 'absolute',
                  top: 2,
                  left: 2,
                  backgroundColor: '#4caf50',
                  color: 'white',
                  borderRadius: '50%',
                  width: 16,
                  height: 16,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '10px'
                }}
              >
                ‚òÖ
              </Box>
            )}
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ –∏ —Ä–∞–∑–º–µ—Ä–µ */}
            <Box
              sx={{
                position: 'absolute',
                bottom: 0,
                left: 0,
                right: 0,
                backgroundColor: 'rgba(0,0,0,0.7)',
                color: 'white',
                padding: '2px 4px',
                fontSize: '10px',
                textAlign: 'center'
              }}
            >
              {image.format?.toUpperCase()} ‚Ä¢ {image.dimensions}
            </Box>
          </Paper>
        ))}
      </Box>
      
      <Typography variant="caption" color="text.secondary">
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö. 
        –í—Å–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ JPG –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
      </Typography>
    </Box>
  );
};

export default ImageUploadPreview; 