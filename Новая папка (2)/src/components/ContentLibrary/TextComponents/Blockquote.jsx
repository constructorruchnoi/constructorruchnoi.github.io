import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  IconButton,
  Tooltip,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Button,
  Chip,
  Avatar,
  Grid,
  Switch,
  FormControlLabel,
  Divider
} from '@mui/material';
import FormatQuoteIcon from '@mui/icons-material/FormatQuote';
import EditIcon from '@mui/icons-material/Edit';
import SaveIcon from '@mui/icons-material/Save';
import PersonIcon from '@mui/icons-material/Person';
import EditableElementWrapper from '../EditableElementWrapper';
import useEditableElement from '../../../hooks/useEditableElement';

const Blockquote = ({
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  quote = '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã. –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —Ü–∏—Ç–∞—Ç—É.',
  author = '',
  source = '',
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  showAuthor = true,
  showSource = true,
  
  // –¶–≤–µ—Ç–∞
  quoteColor = '#555555',
  authorColor = '#888888',
  backgroundColor = '#f8f9fa',
  borderColor = '#1976d2',
  
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç
  useGradient = false,
  gradientColor1 = '#f8f9fa',
  gradientColor2 = '#ffffff',
  gradientDirection = 'to right',
  
  // –®—Ä–∏—Ñ—Ç
  fontFamily = 'inherit',
  fontWeight = 'normal',
  
  // –†–∞–∑–º–µ—Ä—ã
  quoteFontSize = 18,
  authorFontSize = 14,
  padding = 24,
  borderWidth = 4,
  
  // –°—Ç–∏–ª—å
  textAlign = 'left',
  borderPosition = 'left',
  italic = true,
  
  // –ü—Ä–æ—á–µ–µ
  isPreview = false,
  isEditing = false,
  onSave,
  onCancel,
  onUpdate,
  editable = true
}) => {
  const [isInternalEditing, setIsInternalEditing] = useState(false);
  const [editData, setEditData] = useState({
    quote,
    author,
    source
  });
  const [colorSettings, setColorSettings] = useState({
    quoteColor,
    authorColor,
    backgroundColor,
    borderColor,
    useGradient,
    gradientColor1,
    gradientColor2,
    gradientDirection
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    setEditData({ quote, author, source });
  }, [quote, author, source]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    setColorSettings({
      quoteColor,
      authorColor,
      backgroundColor,
      borderColor,
      useGradient,
      gradientColor1,
      gradientColor2,
      gradientDirection
    });
  }, [quoteColor, authorColor, backgroundColor, borderColor, useGradient, gradientColor1, gradientColor2, gradientDirection]);

  const handleSaveChanges = () => {
    console.log('[Blockquote] Saving changes:', editData, colorSettings);
    setIsInternalEditing(false);
    if (onUpdate) {
      onUpdate({
        ...editData,
        ...colorSettings
      });
    }
  };

  const handleCancelChanges = () => {
    console.log('[Blockquote] Canceling changes');
    setEditData({ quote, author, source });
    setIsInternalEditing(false);
  };

  const getBorderStyle = (useSettings = false) => {
    const borderStyle = `${borderWidth}px solid ${useSettings ? colorSettings.borderColor : borderColor}`;
    
    switch (borderPosition) {
      case 'left':
        return { borderLeft: borderStyle };
      case 'right':
        return { borderRight: borderStyle };
      case 'top':
        return { borderTop: borderStyle };
      case 'bottom':
        return { borderBottom: borderStyle };
      case 'around':
        return { border: borderStyle };
      default:
        return { borderLeft: borderStyle };
    }
  };

  const getQuoteStyle = (useSettings = false) => {
    const shouldUseGradient = useSettings ? colorSettings.useGradient : useGradient;
    const bg1 = useSettings ? colorSettings.gradientColor1 : gradientColor1;
    const bg2 = useSettings ? colorSettings.gradientColor2 : gradientColor2;
    const direction = useSettings ? colorSettings.gradientDirection : gradientDirection;
    const bgColor = useSettings ? colorSettings.backgroundColor : backgroundColor;
    
    return {
      background: shouldUseGradient 
        ? `linear-gradient(${direction}, ${bg1}, ${bg2})`
        : bgColor,
      padding: `${padding}px`,
      borderRadius: borderPosition === 'around' ? '8px' : '4px',
      textAlign,
      fontFamily,
      position: 'relative',
      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
      transition: 'all 0.3s ease',
      ...getBorderStyle(useSettings)
    };
  };

  const getQuoteTextStyle = (useSettings = false) => ({
    fontSize: `${quoteFontSize}px`,
    color: useSettings ? colorSettings.quoteColor : quoteColor,
    fontWeight,
    fontStyle: italic ? 'italic' : 'normal',
    lineHeight: 1.6,
    margin: 0,
    marginBottom: (showAuthor && author) || (showSource && source) ? '16px' : 0
  });

  const getAuthorStyle = (useSettings = false) => ({
    fontSize: `${authorFontSize}px`,
    color: useSettings ? colorSettings.authorColor : authorColor,
    fontWeight: 'bold',
    margin: 0
  });

  const getSourceStyle = (useSettings = false) => ({
    fontSize: `${authorFontSize - 2}px`,
    color: useSettings ? colorSettings.authorColor : authorColor,
    opacity: 0.8,
    margin: 0,
    marginTop: '4px'
  });

  // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–≤—å—é
  if (isPreview && isEditing) {
    return (
      <Box sx={{ mb: 2 }}>
        <Paper sx={{ border: '2px solid #1976d2', borderRadius: 1, overflow: 'hidden' }}>
          {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–≤—å—é */}
          <Paper sx={{ p: 1, backgroundColor: '#1976d2', color: 'white' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <FormatQuoteIcon />
              <Typography variant="body2" sx={{ flexGrow: 1 }}>
                üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
              </Typography>
              <Button
                size="small"
                onClick={handleSaveChanges}
                variant="contained"
                color="success"
                sx={{ minWidth: 'auto', mr: 1 }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button
                size="small"
                onClick={handleCancelChanges}
                variant="outlined"
                sx={{ 
                  minWidth: 'auto', 
                  color: 'white', 
                  borderColor: 'white',
                  '&:hover': {
                    borderColor: 'white',
                    backgroundColor: 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </Box>
          </Paper>

          {/* –ü–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <Box sx={{ p: 2 }}>
            <TextField
              fullWidth
              multiline
              rows={3}
              value={editData.quote}
              onChange={(e) => setEditData(prev => ({ ...prev, quote: e.target.value }))}
              label="–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã"
              sx={{ mb: 2 }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã..."
            />
            <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
              <TextField
                fullWidth
                value={editData.author}
                onChange={(e) => setEditData(prev => ({ ...prev, author: e.target.value }))}
                label="–ê–≤—Ç–æ—Ä"
                placeholder="–ò–º—è –∞–≤—Ç–æ—Ä–∞"
              />
              <TextField
                fullWidth
                value={editData.source}
                onChange={(e) => setEditData(prev => ({ ...prev, source: e.target.value }))}
                label="–ò—Å—Ç–æ—á–Ω–∏–∫"
                placeholder="–ö–Ω–∏–≥–∞, –∫–æ–º–ø–∞–Ω–∏—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
              />
            </Box>
            
            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            <Box sx={{ p: 2, backgroundColor: '#f9f9f9', borderRadius: 1, border: '1px dashed #ccc' }}>
              <Typography variant="caption" color="text.secondary" gutterBottom>
                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:
              </Typography>
                              <Paper sx={getQuoteStyle(true)}>
                  {/* –ò–∫–æ–Ω–∫–∞ —Ü–∏—Ç–∞—Ç—ã */}
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '-12px',
                      left: textAlign === 'center' ? '50%' : '16px',
                      transform: textAlign === 'center' ? 'translateX(-50%)' : 'none',
                      backgroundColor: colorSettings.borderColor,
                      borderRadius: '50%',
                      width: '32px',
                      height: '32px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
                    }}
                  >
                    <FormatQuoteIcon sx={{ color: 'white', fontSize: '18px' }} />
                  </Box>

                  {/* –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã */}
                  <Typography component="blockquote" sx={getQuoteTextStyle(true)}>
                    "{editData.quote || '–í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞...'}"
                  </Typography>

                  {/* –ê–≤—Ç–æ—Ä –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ */}
                  {((showAuthor && editData.author) || (showSource && editData.source)) && (
                    <Box sx={{ 
                      display: 'flex', 
                      flexDirection: 'column',
                      alignItems: textAlign === 'center' ? 'center' : 
                                 textAlign === 'right' ? 'flex-end' : 'flex-start'
                    }}>
                      {showAuthor && editData.author && (
                        <Typography component="cite" sx={getAuthorStyle(true)}>
                          ‚Äî {editData.author}
                        </Typography>
                      )}
                      {showSource && editData.source && (
                        <Typography component="span" sx={getSourceStyle(true)}>
                          {editData.source}
                        </Typography>
                      )}
                    </Box>
                  )}
              </Paper>
            </Box>
          </Box>
        </Paper>
      </Box>
    );
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–≤—å—é —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (isPreview) {
    return (
      <Paper 
        sx={{
          ...getQuoteStyle()
        }}
      >
        {/* –ò–∫–æ–Ω–∫–∞ —Ü–∏—Ç–∞—Ç—ã */}
        <Box
          sx={{
            position: 'absolute',
            top: '-12px',
            left: textAlign === 'center' ? '50%' : '16px',
            transform: textAlign === 'center' ? 'translateX(-50%)' : 'none',
            backgroundColor: borderColor,
            borderRadius: '50%',
            width: '32px',
            height: '32px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
          }}
        >
          <FormatQuoteIcon sx={{ color: 'white', fontSize: '18px' }} />
        </Box>

        {/* –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã */}
        <Typography component="blockquote" sx={getQuoteTextStyle(false)}>
          "{quote}"
        </Typography>

        {/* –ê–≤—Ç–æ—Ä –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ */}
        {((showAuthor && author) || (showSource && source)) && (
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: textAlign === 'center' ? 'center' : 
                       textAlign === 'right' ? 'flex-end' : 'flex-start'
          }}>
            {showAuthor && author && (
              <Typography component="cite" sx={getAuthorStyle(false)}>
                ‚Äî {author}
              </Typography>
            )}
            {showSource && source && (
              <Typography component="span" sx={getSourceStyle(false)}>
                {source}
              </Typography>
            )}
          </Box>
        )}
      </Paper>
    );
  }

  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const renderQuote = () => (
    <Paper sx={getQuoteStyle()}>
      {/* –ò–∫–æ–Ω–∫–∞ —Ü–∏—Ç–∞—Ç—ã */}
      <Box
        sx={{
          position: 'absolute',
          top: '-12px',
          left: textAlign === 'center' ? '50%' : '16px',
          transform: textAlign === 'center' ? 'translateX(-50%)' : 'none',
          backgroundColor: borderColor,
          borderRadius: '50%',
          width: '32px',
          height: '32px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
        }}
      >
        <FormatQuoteIcon sx={{ color: 'white', fontSize: '18px' }} />
      </Box>

      {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editable && (
        <Box
          sx={{
            position: 'absolute',
            top: '8px',
            right: '8px',
            opacity: 0,
            transition: 'opacity 0.2s ease',
            zIndex: 10,
            '.quote-container:hover &': {
              opacity: 1
            }
          }}
        >
          <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É">
            <IconButton
              size="small"
              onClick={() => setIsInternalEditing(true)}
              sx={{
                backgroundColor: 'rgba(255,255,255,0.9)',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,1)'
                }
              }}
            >
              <EditIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
      )}

      {/* –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã */}
      <Typography component="blockquote" sx={getQuoteTextStyle(false)}>
        "{quote}"
      </Typography>

      {/* –ê–≤—Ç–æ—Ä –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ */}
      {((showAuthor && author) || (showSource && source)) && (
        <Box sx={{ 
          display: 'flex', 
          flexDirection: 'column',
          alignItems: textAlign === 'center' ? 'center' : 
                     textAlign === 'right' ? 'flex-end' : 'flex-start'
        }}>
          {showAuthor && author && (
            <Typography component="cite" sx={getAuthorStyle(false)}>
              ‚Äî {author}
            </Typography>
          )}
          {showSource && source && (
            <Typography component="span" sx={getSourceStyle(false)}>
              {source}
            </Typography>
          )}
        </Box>
      )}
    </Paper>
  );

  return (
    <Box className="quote-container">
      {/* –ü—Ä–µ–≤—å—é */}
      {!isInternalEditing && renderQuote()}

      {/* –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) */}
      {isInternalEditing && (
        <Paper sx={{ p: 3, border: '2px solid #1976d2' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
            <FormatQuoteIcon color="primary" />
            <Typography variant="h6" color="primary">
              –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
            </Typography>
            <Chip label="–ê–∫—Ç–∏–≤–Ω–æ" color="primary" size="small" />
          </Box>

          {/* –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã */}
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={8}>
              <TextField
                fullWidth
                multiline
                rows={3}
                value={editData.quote}
                onChange={(e) => setEditData(prev => ({ ...prev, quote: e.target.value }))}
                label="–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã"
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                fullWidth
                type="color"
                label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã"
                value={colorSettings.quoteColor}
                onChange={(e) => setColorSettings(prev => ({ ...prev, quoteColor: e.target.value }))}
              />
            </Grid>
          </Grid>

          {/* –ê–≤—Ç–æ—Ä */}
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={8}>
              <TextField
                fullWidth
                value={editData.author}
                onChange={(e) => setEditData(prev => ({ ...prev, author: e.target.value }))}
                label="–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã"
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                fullWidth
                type="color"
                label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∞"
                value={colorSettings.authorColor}
                onChange={(e) => setColorSettings(prev => ({ ...prev, authorColor: e.target.value }))}
              />
            </Grid>
          </Grid>

          {/* –ò—Å—Ç–æ—á–Ω–∏–∫ */}
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={8}>
              <TextField
                fullWidth
                value={editData.source}
                onChange={(e) => setEditData(prev => ({ ...prev, source: e.target.value }))}
                label="–ò—Å—Ç–æ—á–Ω–∏–∫"
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                fullWidth
                type="color"
                label="–¶–≤–µ—Ç —Ä–∞–º–∫–∏"
                value={colorSettings.borderColor}
                onChange={(e) => setColorSettings(prev => ({ ...prev, borderColor: e.target.value }))}
              />
            </Grid>
          </Grid>

          <Divider sx={{ my: 2 }} />

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ */}
          <Typography variant="subtitle2" gutterBottom>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞
          </Typography>
          
          <FormControlLabel
            control={
              <Switch
                checked={colorSettings.useGradient}
                onChange={(e) => setColorSettings(prev => ({ ...prev, useGradient: e.target.checked }))}
              />
            }
            label="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç"
            sx={{ mb: 2 }}
          />

          {!colorSettings.useGradient ? (
            <TextField
              fullWidth
              type="color"
              label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞"
              value={colorSettings.backgroundColor}
              onChange={(e) => setColorSettings(prev => ({ ...prev, backgroundColor: e.target.value }))}
              sx={{ mb: 2 }}
            />
          ) : (
            <Grid container spacing={2} sx={{ mb: 2 }}>
              <Grid item xs={4}>
                <TextField
                  fullWidth
                  type="color"
                  label="–¶–≤–µ—Ç 1"
                  value={colorSettings.gradientColor1}
                  onChange={(e) => setColorSettings(prev => ({ ...prev, gradientColor1: e.target.value }))}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  fullWidth
                  type="color"
                  label="–¶–≤–µ—Ç 2"
                  value={colorSettings.gradientColor2}
                  onChange={(e) => setColorSettings(prev => ({ ...prev, gradientColor2: e.target.value }))}
                />
              </Grid>
              <Grid item xs={4}>
                <FormControl fullWidth>
                  <InputLabel>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</InputLabel>
                  <Select
                    value={colorSettings.gradientDirection}
                    label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                    onChange={(e) => setColorSettings(prev => ({ ...prev, gradientDirection: e.target.value }))}
                  >
                    <MenuItem value="to right">‚Üí –í–ø—Ä–∞–≤–æ</MenuItem>
                    <MenuItem value="to left">‚Üê –í–ª–µ–≤–æ</MenuItem>
                    <MenuItem value="to bottom">‚Üì –í–Ω–∏–∑</MenuItem>
                    <MenuItem value="to top">‚Üë –í–≤–µ—Ä—Ö</MenuItem>
                    <MenuItem value="to bottom right">‚Üò –í–ø—Ä–∞–≤–æ-–≤–Ω–∏–∑</MenuItem>
                    <MenuItem value="to bottom left">‚Üô –í–ª–µ–≤–æ-–≤–Ω–∏–∑</MenuItem>
                    <MenuItem value="to top right">‚Üó –í–ø—Ä–∞–≤–æ-–≤–≤–µ—Ä—Ö</MenuItem>
                    <MenuItem value="to top left">‚Üñ –í–ª–µ–≤–æ-–≤–≤–µ—Ä—Ö</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          )}

          {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>
              –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:
            </Typography>
            <Box sx={{ border: '1px dashed #ccc', borderRadius: 1, p: 2 }}>
                              <Paper sx={getQuoteStyle(true)}>
                {/* –ò–∫–æ–Ω–∫–∞ —Ü–∏—Ç–∞—Ç—ã */}
                <Box
                  sx={{
                    position: 'absolute',
                    top: '-12px',
                    left: textAlign === 'center' ? '50%' : '16px',
                    transform: textAlign === 'center' ? 'translateX(-50%)' : 'none',
                    backgroundColor: colorSettings.borderColor,
                    borderRadius: '50%',
                    width: '32px',
                    height: '32px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
                  }}
                >
                  <FormatQuoteIcon sx={{ color: 'white', fontSize: '18px' }} />
                </Box>

                {/* –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã */}
                <Typography component="blockquote" sx={getQuoteTextStyle(true)}>
                  "{editData.quote}"
                </Typography>

                {/* –ê–≤—Ç–æ—Ä –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ */}
                {((showAuthor && editData.author) || (showSource && editData.source)) && (
                  <Box sx={{ 
                    display: 'flex', 
                    flexDirection: 'column',
                    alignItems: textAlign === 'center' ? 'center' : 
                               textAlign === 'right' ? 'flex-end' : 'flex-start'
                  }}>
                    {showAuthor && editData.author && (
                      <Typography component="cite" sx={getAuthorStyle(true)}>
                        ‚Äî {editData.author}
                      </Typography>
                    )}
                    {showSource && editData.source && (
                      <Typography component="span" sx={getSourceStyle(true)}>
                        {editData.source}
                      </Typography>
                    )}
                  </Box>
                )}
              </Paper>
            </Box>
          </Box>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>
            <Button onClick={handleCancelChanges}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              variant="contained" 
              startIcon={<SaveIcon />} 
              onClick={handleSaveChanges}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default Blockquote; 