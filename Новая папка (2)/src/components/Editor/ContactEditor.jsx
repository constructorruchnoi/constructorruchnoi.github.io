import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  TextField,
  Grid,
  Paper,
  IconButton,
  Collapse,
  Divider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import { styled } from '@mui/material/styles';
import { contactPresets } from '../../utils/contactPresets';
import { STYLE_PRESETS } from '../../utils/editorStylePresets';

const ExpandMore = styled((props) => {
  const { expand, ...other } = props;
  return <IconButton {...other} />;
})(({ theme, expand }) => ({
  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',
  marginLeft: 'auto',
  transition: theme.transitions.create('transform', {
    duration: theme.transitions.duration.shortest,
  }),
}));

const ContactEditor = ({ contactData = {}, onContactChange, expanded, onToggle, headerData = {} }) => {
  const [selectedPreset, setSelectedPreset] = useState('');
  const [selectedQuickStyle, setSelectedQuickStyle] = useState('');
  
  const defaultContactData = {
    title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
    description: '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
    companyName: '–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è',
    address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
    phone: '+7 (XXX) XXX-XX-XX',
    email: 'info@example.com',
    mapCoordinates: {
      lat: 55.7558,
      lng: 37.6173
    },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ —Å–µ–∫—Ü–∏–∏
    showBackground: true,
    backgroundType: 'solid',
    backgroundColor: '#ffffff',
    gradientColor1: '#ffffff',
    gradientColor2: '#f5f5f5',
    gradientDirection: 'to bottom',
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    titleColor: '#1565c0',
    descriptionColor: '#424242',
    companyInfoColor: '#333333',
    formVariant: 'outlined',
    infoVariant: 'elevation',
    formBackgroundColor: '#ffffff',
    infoBackgroundColor: '#ffffff',
    formBorderColor: '#1565c0',
    infoBorderColor: '#e0e0e0',
    labelColor: '#333333',
    inputBackgroundColor: '#ffffff',
    inputTextColor: '#333333',
    buttonColor: '#1565c0',
    buttonTextColor: '#ffffff',
    iconColor: '#1565c0',
    infoTitleColor: '#1565c0',
    infoTextColor: '#424242',
    thankYouMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
    closeButtonText: '–ó–∞–∫—Ä—ã—Ç—å'
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
  useEffect(() => {
    if (headerData && headerData.siteName) {
      handleChange('companyName', headerData.siteName);
    }
  }, [headerData?.siteName]);

  const handleChange = (field, value) => {
    console.log('üîß CONTACT EDITOR CHANGE:', { field, value });
    console.log('üìù Previous contactData:', contactData);
    
    const newContactData = {
      ...defaultContactData,
      ...contactData,
      [field]: value
    };
    
    console.log('‚ú® New contactData:', newContactData);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ–Ω–∞
    if (['showBackground', 'backgroundType', 'backgroundColor', 'gradientColor1', 'gradientColor2', 'gradientDirection'].includes(field)) {
      console.log('üé® BACKGROUND SETTING CHANGED:');
      console.log(`üîπ Field: ${field}`);
      console.log(`üîπ New Value: ${value}`);
      console.log('üîπ Background Settings:', {
        showBackground: newContactData.showBackground,
        backgroundType: newContactData.backgroundType,
        backgroundColor: newContactData.backgroundColor,
        gradientColor1: newContactData.gradientColor1,
        gradientColor2: newContactData.gradientColor2,
        gradientDirection: newContactData.gradientDirection
      });
    }
    
    onContactChange(newContactData);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
  const handlePresetChange = (presetKey) => {
    const preset = contactPresets[presetKey];
    if (preset) {
      console.log('üé≠ APPLYING CONTACT PRESET:', presetKey);
      console.log('üé® Preset data:', preset);
      
      setSelectedPreset(presetKey);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
      setSelectedQuickStyle('');
      
      const newContactData = {
        ...contactData,
        ...preset,
        companyName: contactData.companyName || headerData.siteName || defaultContactData.companyName,
        address: contactData.address || defaultContactData.address,
        phone: contactData.phone || defaultContactData.phone,
        email: contactData.email || defaultContactData.email,
        mapCoordinates: contactData.mapCoordinates || defaultContactData.mapCoordinates
      };
      
      console.log('üîß Final preset contactData:', newContactData);
      console.log('üé® Background settings from preset:', {
        showBackground: newContactData.showBackground,
        backgroundType: newContactData.backgroundType,
        backgroundColor: newContactData.backgroundColor,
        gradientColor1: newContactData.gradientColor1,
        gradientColor2: newContactData.gradientColor2,
        gradientDirection: newContactData.gradientDirection
      });
      
      onContactChange(newContactData);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∏–ª–µ–π (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö)
  const handleQuickStyleChange = (styleKey) => {
    console.log('üî• QUICK STYLE TRIGGERED:', styleKey);
    console.log('üî• Available STYLE_PRESETS keys:', Object.keys(STYLE_PRESETS));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∏–ª—è
    setSelectedQuickStyle(styleKey);
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç —Å—Ç–∏–ª—è" (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!styleKey) {
      console.log('üìù No quick style selected (empty value)');
      return;
    }
    
    const style = STYLE_PRESETS[styleKey];
    if (style) {
      console.log('‚ö° APPLYING QUICK STYLE TO CONTACT:', styleKey);
      console.log('üé® Quick style data:', style);
      console.log('üé® Current contactData before:', contactData);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ—Å–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∏–ª—è
      setSelectedPreset('');
      
      const newContactData = {
        ...contactData,
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∏–ª—è
        titleColor: style.titleColor,
        descriptionColor: style.descriptionColor,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        companyName: contactData.companyName || headerData.siteName || defaultContactData.companyName,
        address: contactData.address || defaultContactData.address,
        phone: contactData.phone || defaultContactData.phone,
        email: contactData.email || defaultContactData.email,
        mapCoordinates: contactData.mapCoordinates || defaultContactData.mapCoordinates
      };
      
      console.log('üîß Final quick style contactData:', newContactData);
      console.log('üîß Colors applied: title =', style.titleColor, ', description =', style.descriptionColor);
      
      onContactChange(newContactData);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
      setTimeout(() => {
        console.log('‚è∞ ContactData after timeout:', contactData);
      }, 100);
    } else {
      console.error('‚ùå Quick style not found:', styleKey);
      console.log('‚ùå Available styles:', Object.keys(STYLE_PRESETS));
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤
  useEffect(() => {
    if (contactData) {
      const currentPreset = Object.entries(contactPresets).find(([_, preset]) => {
        return preset.titleColor === contactData.titleColor &&
               preset.descriptionColor === contactData.descriptionColor &&
               preset.formBackgroundColor === contactData.formBackgroundColor &&
               preset.formBorderColor === contactData.formBorderColor;
      });
      
      if (currentPreset) {
        setSelectedPreset(currentPreset[0]);
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –ø—Ä–µ—Å–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∏–ª—å
        setSelectedQuickStyle('');
      } else {
        setSelectedPreset('');
        // –ï—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—ã—Å—Ç—Ä–æ–º—É —Å—Ç–∏–ª—é
        const quickStyleMatch = Object.entries(STYLE_PRESETS).find(([_, style]) => {
          return style.titleColor === contactData.titleColor &&
                 style.descriptionColor === contactData.descriptionColor;
        });
        
        if (quickStyleMatch) {
          setSelectedQuickStyle(quickStyleMatch[0]);
        } else {
          setSelectedQuickStyle('');
        }
      }
    }
  }, [contactData]);

  return (
    <Paper sx={{ 
      p: 2, 
      mb: 2,
      backgroundColor: '#f0fff0'
    }}>
      <Box 
        sx={{ 
          display: 'flex', 
          alignItems: 'center',
          cursor: 'pointer'
        }}
        onClick={onToggle}
      >
        <Typography variant="h6" sx={{ flexGrow: 1 }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        </Typography>
        <ExpandMore
          expand={expanded}
          onClick={(e) => {
            e.stopPropagation();
            onToggle();
          }}
          aria-expanded={expanded}
          aria-label="show more"
          sx={{ cursor: 'pointer' }}
        >
          {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
        </ExpandMore>
      </Box>

      <Collapse in={expanded} timeout="auto" unmountOnExit>
        {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
        <Box sx={{ mb: 3, mt: 2 }}>
          <FormControl fullWidth>
            <InputLabel>–ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</InputLabel>
            <Select
              value={selectedPreset}
              onChange={(e) => handlePresetChange(e.target.value)}
              label="–ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
            >
              <MenuItem value="">
                <em>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π</em>
              </MenuItem>
              {Object.entries(contactPresets).map(([key, preset]) => (
                <MenuItem 
                  key={key} 
                  value={key}
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 1
                  }}
                >
                  <Box
                    sx={{
                      width: 24,
                      height: 24,
                      borderRadius: 1,
                      backgroundColor: preset.titleColor,
                      border: '2px solid',
                      borderColor: preset.formBorderColor
                    }}
                  />
                  {preset.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Box>

        {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏ (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö) */}
        <Box sx={{ mb: 3 }}>
          <Typography variant="subtitle2" sx={{ mb: 1 }}>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏</Typography>
          <FormControl fullWidth>
            <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å</InputLabel>
            <Select
              label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å"
              value={selectedQuickStyle}
              onChange={(e) => handleQuickStyleChange(e.target.value)}
              MenuProps={{
                PaperProps: {
                  style: {
                    maxHeight: 400,
                    overflowY: 'auto'
                  }
                }
              }}
              sx={{
                '& .MuiSelect-select': {
                  display: 'flex',
                  alignItems: 'center',
                  gap: 1
                }
              }}
            >
              <MenuItem value="">
                <em>–ù–µ—Ç —Å—Ç–∏–ª—è</em>
              </MenuItem>
              {Object.entries(STYLE_PRESETS).map(([key, preset]) => (
                <MenuItem 
                  key={key} 
                  value={key}
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 1,
                    minHeight: '48px',
                    '&:hover': {
                      backgroundColor: 'rgba(0, 0, 0, 0.04)'
                    }
                  }}
                >
                  <Box
                    sx={{
                      width: 24,
                      height: 24,
                      borderRadius: 1,
                      background: preset.cardBackgroundType === 'gradient'
                        ? `linear-gradient(${preset.cardGradientDirection}, ${preset.cardGradientColor1}, ${preset.cardGradientColor2})`
                        : preset.cardBackgroundColor,
                      border: `1px solid ${preset.borderColor}`,
                      boxShadow: preset.style.shadow
                    }}
                  />
                  <Typography>
                    {key.split('_').map(word => word.charAt(0) + word.slice(1).toLowerCase()).join(' ')}
                  </Typography>
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Box>

        <Grid container spacing={2}>
          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1 }}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
              value={contactData.title || defaultContactData.title}
              onChange={(e) => handleChange('title', e.target.value)}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              multiline
              rows={2}
              value={contactData.description || defaultContactData.description}
              onChange={(e) => handleChange('description', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
              value={contactData.companyName || headerData.siteName || defaultContactData.companyName}
              onChange={(e) => handleChange('companyName', e.target.value)}
              helperText="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∞–π—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∞–ø–∫–∏"
              disabled={!!headerData.siteName}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–ê–¥—Ä–µ—Å"
              value={contactData.address || defaultContactData.address}
              onChange={(e) => handleChange('address', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¢–µ–ª–µ—Ñ–æ–Ω"
              value={contactData.phone || defaultContactData.phone}
              onChange={(e) => handleChange('phone', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Email"
              value={contactData.email || defaultContactData.email}
              onChange={(e) => handleChange('email', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç—ã</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–®–∏—Ä–æ—Ç–∞"
              type="number"
              value={contactData.mapCoordinates?.lat || defaultContactData.mapCoordinates.lat}
              onChange={(e) => handleChange('mapCoordinates', {
                ...contactData.mapCoordinates || defaultContactData.mapCoordinates,
                lat: parseFloat(e.target.value)
              })}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–î–æ–ª–≥–æ—Ç–∞"
              type="number"
              value={contactData.mapCoordinates?.lng || defaultContactData.mapCoordinates.lng}
              onChange={(e) => handleChange('mapCoordinates', {
                ...contactData.mapCoordinates || defaultContactData.mapCoordinates,
                lng: parseFloat(e.target.value)
              })}
            />
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12}>
            <FormControlLabel
              control={
                <Switch
                  checked={contactData.showBackground !== false}
                  onChange={(e) => handleChange('showBackground', e.target.checked)}
                />
              }
              label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ–Ω —Å–µ–∫—Ü–∏–∏"
            />
          </Grid>

          {contactData.showBackground !== false && (
            <>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel>–¢–∏–ø —Ñ–æ–Ω–∞ —Å–µ–∫—Ü–∏–∏</InputLabel>
                  <Select
                    value={contactData.backgroundType || defaultContactData.backgroundType}
                    label="–¢–∏–ø —Ñ–æ–Ω–∞ —Å–µ–∫—Ü–∏–∏"
                    onChange={(e) => handleChange('backgroundType', e.target.value)}
                  >
                    <MenuItem value="solid">–°–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç</MenuItem>
                    <MenuItem value="gradient">–ì—Ä–∞–¥–∏–µ–Ω—Ç</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              {contactData.backgroundType === 'solid' ? (
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Å–µ–∫—Ü–∏–∏"
                    type="color"
                    value={contactData.backgroundColor || defaultContactData.backgroundColor}
                    onChange={(e) => handleChange('backgroundColor', e.target.value)}
                  />
                </Grid>
              ) : (
                <>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      fullWidth
                      label="–¶–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ 1"
                      type="color"
                      value={contactData.gradientColor1 || defaultContactData.gradientColor1}
                      onChange={(e) => handleChange('gradientColor1', e.target.value)}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      fullWidth
                      label="–¶–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ 2"
                      type="color"
                      value={contactData.gradientColor2 || defaultContactData.gradientColor2}
                      onChange={(e) => handleChange('gradientColor2', e.target.value)}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <FormControl fullWidth>
                      <InputLabel>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</InputLabel>
                      <Select
                        value={contactData.gradientDirection || defaultContactData.gradientDirection}
                        label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞"
                        onChange={(e) => handleChange('gradientDirection', e.target.value)}
                      >
                        <MenuItem value="to bottom">–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑</MenuItem>
                        <MenuItem value="to right">–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ</MenuItem>
                        <MenuItem value="45deg">–ü–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ (45¬∞)</MenuItem>
                        <MenuItem value="135deg">–ü–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ (135¬∞)</MenuItem>
                        <MenuItem value="to bottom right">–ö –Ω–∏–∂–Ω–µ–º—É –ø—Ä–∞–≤–æ–º—É —É–≥–ª—É</MenuItem>
                        <MenuItem value="to bottom left">–ö –Ω–∏–∂–Ω–µ–º—É –ª–µ–≤–æ–º—É —É–≥–ª—É</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                </>
              )}
            </>
          )}

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"
              type="color"
              value={contactData.titleColor || defaultContactData.titleColor}
              onChange={(e) => handleChange('titleColor', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
              type="color"
              value={contactData.descriptionColor || defaultContactData.descriptionColor}
              onChange={(e) => handleChange('descriptionColor', e.target.value)}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"
              type="color"
              value={contactData.companyInfoColor || defaultContactData.companyInfoColor}
              onChange={(e) => handleChange('companyInfoColor', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–°—Ç–∏–ª—å —Ñ–æ—Ä–º—ã</InputLabel>
              <Select
                value={contactData.formVariant || defaultContactData.formVariant}
                label="–°—Ç–∏–ª—å —Ñ–æ—Ä–º—ã"
                onChange={(e) => handleChange('formVariant', e.target.value)}
              >
                <MenuItem value="outlined">–° –æ–±–≤–æ–¥–∫–æ–π</MenuItem>
                <MenuItem value="filled">–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π</MenuItem>
                <MenuItem value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–°—Ç–∏–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</InputLabel>
              <Select
                value={contactData.infoVariant || defaultContactData.infoVariant}
                label="–°—Ç–∏–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                onChange={(e) => handleChange('infoVariant', e.target.value)}
              >
                <MenuItem value="elevation">–° —Ç–µ–Ω—å—é</MenuItem>
                <MenuItem value="outlined">–° –æ–±–≤–æ–¥–∫–æ–π</MenuItem>
                <MenuItem value="plain">–ü–ª–æ—Å–∫–∏–π</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–¶–≤–µ—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ñ–æ—Ä–º—ã"
              type="color"
              value={contactData.formBackgroundColor || defaultContactData.formBackgroundColor}
              onChange={(e) => handleChange('formBackgroundColor', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
              type="color"
              value={contactData.infoBackgroundColor || defaultContactData.infoBackgroundColor}
              onChange={(e) => handleChange('infoBackgroundColor', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏ —Ñ–æ—Ä–º—ã"
              type="color"
              value={contactData.formBorderColor || defaultContactData.formBorderColor}
              onChange={(e) => handleChange('formBorderColor', e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
              type="color"
              value={contactData.infoBorderColor || defaultContactData.infoBorderColor}
              onChange={(e) => handleChange('infoBorderColor', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–®—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞</InputLabel>
              <Select
                value={contactData.titleFont || defaultContactData.titleFont}
                label="–®—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                onChange={(e) => handleChange('titleFont', e.target.value)}
              >
                <MenuItem value="default">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</MenuItem>
                <MenuItem value="bold">–ñ–∏—Ä–Ω—ã–π</MenuItem>
                <MenuItem value="italic">–ö—É—Ä—Å–∏–≤</MenuItem>
                <MenuItem value="cursive">–†—É–∫–æ–ø–∏—Å–Ω—ã–π</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>–®—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞</InputLabel>
              <Select
                value={contactData.textFont || defaultContactData.textFont}
                label="–®—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞"
                onChange={(e) => handleChange('textFont', e.target.value)}
              >
                <MenuItem value="default">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</MenuItem>
                <MenuItem value="bold">–ñ–∏—Ä–Ω—ã–π</MenuItem>
                <MenuItem value="italic">–ö—É—Ä—Å–∏–≤</MenuItem>
                <MenuItem value="cursive">–†—É–∫–æ–ø–∏—Å–Ω—ã–π</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12}>
            <Typography variant="subtitle1" sx={{ mb: 1, mt: 2 }}>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∞—Å–∏–±–æ</Typography>
            <Divider sx={{ mb: 2 }} />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
              multiline
              rows={4}
              name="thankYouMessage"
              value={contactData.thankYouMessage || ''}
              onChange={(e) => handleChange('thankYouMessage', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"
            />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç—å"
              name="closeButtonText"
              value={contactData.closeButtonText || '–ó–∞–∫—Ä—ã—Ç—å'}
              onChange={(e) => handleChange('closeButtonText', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"
            />
          </Grid>
        </Grid>
      </Collapse>
    </Paper>
  );
};

export default ContactEditor;