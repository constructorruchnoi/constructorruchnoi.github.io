import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Button,
  Grid,
  Alert,
  AlertTitle
} from '@mui/material';
import ImageCard from '../components/ContentLibrary/CardComponents/ImageCard';
import ImageCacheStats from '../components/ContentLibrary/CardComponents/ImageCacheStats';
import { v4 as uuidv4 } from 'uuid';

const TestImageSystem = () => {
  const [cards, setCards] = useState([
    {
      id: uuidv4(),
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ 1',
      content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º.',
      imageUrl: 'https://via.placeholder.com/300x200?text=–¢–µ—Å—Ç+1',
      imageAlt: '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1',
      buttonText: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
      buttonLink: '#',
      variant: 'elevated',
      size: 'medium',
      alignment: 'left',
      showActions: true,
      titleColor: '#333333',
      contentColor: '#666666',
      backgroundColor: '#ffffff',
      borderColor: '#e0e0e0',
      gradientStart: '#667eea',
      gradientEnd: '#764ba2',
      gradientDirection: 'to right',
      useGradient: true,
      gridSize: 'medium',
      animationSettings: {
        animationType: 'fadeIn',
        delay: 0,
        triggerOnView: true,
        triggerOnce: true,
        threshold: 0.1,
        disabled: false
      }
    },
    {
      id: uuidv4(),
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ 2',
      content: '–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –æ–±—ã—á–Ω—ã–º —Ñ–æ–Ω–æ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.',
      imageUrl: 'https://via.placeholder.com/300x200?text=–¢–µ—Å—Ç+2',
      imageAlt: '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2',
      buttonText: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
      buttonLink: '#',
      variant: 'outlined',
      size: 'medium',
      alignment: 'left',
      showActions: true,
      titleColor: '#1976d2',
      contentColor: '#666666',
      backgroundColor: '#f5f5f5',
      borderColor: '#1976d2',
      gradientStart: '#ffffff',
      gradientEnd: '#f5f5f5',
      gradientDirection: 'to right',
      useGradient: false,
      gridSize: 'medium',
      animationSettings: {
        animationType: 'slideInUp',
        delay: 0.2,
        triggerOnView: true,
        triggerOnce: true,
        threshold: 0.1,
        disabled: false
      }
    }
  ]);

  const handleCardUpdate = (index, updatedData) => {
    const newCards = [...cards];
    newCards[index] = { ...newCards[index], ...updatedData };
    setCards(newCards);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ImageCard (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫")
  const handleAddElement = (newElement) => {
    if (Array.isArray(newElement.cards)) {
      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ (multiple-cards)
      const newCards = newElement.cards.map(card => ({
        ...card,
        id: uuidv4(), // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      }));
      setCards(prev => [...prev, ...newCards]);
    } else if (Array.isArray(newElement)) {
      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞–ø—Ä—è–º—É—é
      const newCards = newElement.map(card => ({
        ...card,
        id: uuidv4(),
      }));
      setCards(prev => [...prev, ...newCards]);
    } else if (newElement && typeof newElement === 'object') {
      // –û–¥–∏–Ω–æ—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
      setCards(prev => [...prev, { ...newElement, id: uuidv4() }]);
    }
  };

  const handleAddCard = () => {
    const newCard = {
      id: uuidv4(),
      title: `–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ${cards.length + 1}`,
      content: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ JPG.',
      imageUrl: 'https://via.placeholder.com/300x200?text=–ù–æ–≤–∞—è',
      imageAlt: '–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      buttonText: '–î–µ–π—Å—Ç–≤–∏–µ',
      buttonLink: '#',
      variant: 'elevated',
      size: 'medium',
      alignment: 'left',
      showActions: true,
      titleColor: '#333333',
      contentColor: '#666666',
      backgroundColor: '#ffffff',
      borderColor: '#e0e0e0',
      gradientStart: '#ff9a9e',
      gradientEnd: '#fecfef',
      gradientDirection: '45deg',
      useGradient: true,
      gridSize: 'medium',
      animationSettings: {
        animationType: 'zoomIn',
        delay: 0.4,
        triggerOnView: true,
        triggerOnce: true,
        threshold: 0.1,
        disabled: false
      }
    };
    setCards([...cards, newCard]);
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h3" gutterBottom align="center">
        üñºÔ∏è –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      </Typography>
      
      <Alert severity="info" sx={{ mb: 4 }}>
        <AlertTitle>–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</AlertTitle>
        <Typography variant="body2">
          ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG —Ñ–æ—Ä–º–∞—Ç<br/>
          ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏<br/>
          ‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ IndexedDB + LocalStorage<br/>
          ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã—Ö —Ñ–æ–Ω–æ–≤<br/>
          ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Vercel
        </Typography>
      </Alert>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ */}
      <Paper sx={{ p: 3, mb: 4 }}>
        <Typography variant="h5" gutterBottom>
          üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        </Typography>
        <ImageCacheStats />
      </Paper>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ */}
      <Box sx={{ mb: 4, textAlign: 'center' }}>
        <Button 
          variant="contained" 
          size="large"
          onClick={handleAddCard}
          sx={{ mb: 2 }}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        </Button>
        <Typography variant="body2" color="text.secondary">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        </Typography>
      </Box>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ */}
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
        {cards.map((card, index) => (
          <Box key={card.id} sx={{ minWidth: '300px', flexGrow: 1 }}>
            <ImageCard
              {...card}
              onUpdate={(updatedData) => handleCardUpdate(index, updatedData)}
              onAddElement={handleAddElement}
              editable={true}
            />
          </Box>
        ))}
      </Box>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <Paper sx={{ p: 3, mt: 4 }}>
        <Typography variant="h6" gutterBottom>
          üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        </Typography>
        <Typography variant="body2" paragraph>
          1. <strong>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong> –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –≤ –ª—é–±–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        </Typography>
        <Typography variant="body2" paragraph>
          2. <strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</strong> –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ JPG
        </Typography>
        <Typography variant="body2" paragraph>
          3. <strong>–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–æ–Ω—ã:</strong> –í–∫–ª—é—á–∏—Ç–µ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω" –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç–∞
        </Typography>
        <Typography variant="body2" paragraph>
          4. <strong>–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –≤—ã—à–µ
        </Typography>
        <Typography variant="body2">
          5. <strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞:</strong> –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏
        </Typography>
      </Paper>
    </Container>
  );
};

export default TestImageSystem; 