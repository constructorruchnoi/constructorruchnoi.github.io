/**
 * Live Chat Translations Utility
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º live-chat-translations.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 */
class LiveChatTranslations {
  constructor() {
    this.translations = null;
    this.currentLanguage = 'ru';
    this.supportedLanguages = [
      'ru', 'en', 'es', 'tr', 'de', 'it', 'pt', 'nl', 'ja', 'ko', 
      'he', 'hi', 'uk', 'zh', 'ar', 'fr', 'pl', 'cs', 'da', 'fi',
      'el', 'hu', 'no', 'ro', 'sv', 'th', 'vi', 'bg', 'sr', 'sk', 'sl'
    ];
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  async loadTranslations() {
    try {
      const response = await fetch('/live-chat-translations.json');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      this.translations = await response.json();
      console.log(`‚úÖ Loaded translations for ${this.translations.languages} languages`);
      return this.translations;
    } catch (error) {
      console.error('‚ùå Error loading translations:', error);
      // Fallback –∫ –±–∞–∑–æ–≤—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º
      this.translations = this.getFallbackTranslations();
      return this.translations;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
   */
  setLanguage(langCode) {
    if (this.isLanguageSupported(langCode)) {
      this.currentLanguage = langCode;
      console.log(`üåê Language set to: ${langCode}`);
    } else {
      console.warn(`‚ö†Ô∏è Language ${langCode} not supported, falling back to Russian`);
      this.currentLanguage = 'ru';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
   */
  isLanguageSupported(langCode) {
    return this.supportedLanguages.includes(langCode);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
   */
  getRandomPresetResponse(langCode = null) {
    const lang = langCode || this.currentLanguage;
    
    if (!this.translations || !this.translations.presetResponses[lang]) {
      return this.getFallbackResponse(lang);
    }

    const responses = this.translations.presetResponses[lang];
    const randomIndex = Math.floor(Math.random() * responses.length);
    return responses[randomIndex];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —è–∑—ã–∫–∞
   */
  getAllPresetResponses(langCode = null) {
    const lang = langCode || this.currentLanguage;
    
    if (!this.translations || !this.translations.presetResponses[lang]) {
      return [this.getFallbackResponse(lang)];
    }

    return this.translations.presetResponses[lang];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —è–∑—ã–∫–∞
   */
  getFinalResponse(langCode = null) {
    const lang = langCode || this.currentLanguage;
    
    if (!this.translations || !this.translations.finalResponse || !this.translations.finalResponse[lang]) {
      return this.getFallbackFinalResponse(lang);
    }

    return this.translations.finalResponse[lang];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
   */
  getInterface(langCode = null) {
    const lang = langCode || this.currentLanguage;
    
    if (!this.translations || !this.translations.interface || !this.translations.interface[lang]) {
      return this.getFallbackInterface(lang);
    }

    return this.translations.interface[lang];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
   */
  getChatTitle(langCode = null) {
    const interface = this.getInterface(langCode);
    return interface.title;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
   */
  getInputPlaceholder(langCode = null) {
    const interface = this.getInterface(langCode);
    return interface.placeholder;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  getSendButtonText(langCode = null) {
    const interface = this.getInterface(langCode);
    return interface.sendButton;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
   */
  detectLanguage(text) {
    if (!text || text.length < 3) return 'ru';

    const patterns = {
      'ru': /[–∞-—è—ë]/i,
      'en': /^[a-z\s.,!?]+$/i,
      'es': /[√±√°√©√≠√≥√∫√º]/i,
      'tr': /[√ßƒüƒ±√∂≈ü√º]/i,
      'de': /[√§√∂√º√ü]/i,
      'it': /[√†√®√©√¨√≠√Æ√≤√≥√π]/i,
      'fr': /[√†√¢√§√ß√©√®√™√´√Ø√Æ√¥√π√ª√º√ø]/i,
      'pt': /[√£√¢√†√°√ß√©√™√≠√¥√µ√≥√∫]/i,
      'pl': /[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/i,
      'zh': /[\u4e00-\u9fff]/,
      'ar': /[\u0600-\u06ff]/,
      'he': /[\u0590-\u05ff]/,
      'ja': /[\u3040-\u309f\u30a0-\u30ff\u4e00-\u9faf]/,
      'ko': /[\uac00-\ud7af]/,
      'hi': /[\u0900-\u097f]/,
      'th': /[\u0e00-\u0e7f]/,
      'vi': /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i
    };

    for (const [lang, pattern] of Object.entries(patterns)) {
      if (pattern.test(text)) {
        return lang;
      }
    }

    return 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏
  }

  /**
   * Fallback –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  getFallbackTranslations() {
    return {
      version: "1.0-fallback",
      languages: 3,
      presetResponses: {
        ru: ["–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –≤–∞–º."],
        en: ["Thank you for your message! We will definitely help you."],
        es: ["¬°Gracias por su mensaje! Definitivamente les ayudaremos."]
      },
      finalResponse: {
        ru: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤–Ω–∏–∑—É —Å–∞–π—Ç–∞ üìù",
        en: "Please fill out the feedback form at the bottom of the site üìù",
        es: "Por favor completen el formulario de contacto en la parte inferior del sitio üìù"
      },
      interface: {
        ru: { title: "–û–Ω–ª–∞–π–Ω-—á–∞—Ç", placeholder: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", sendButton: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", typing: "–ø–µ—á–∞—Ç–∞–µ—Ç..." },
        en: { title: "Live Chat", placeholder: "Type message...", sendButton: "Send", typing: "typing..." },
        es: { title: "Chat en Vivo", placeholder: "Escribe mensaje...", sendButton: "Enviar", typing: "escribiendo..." }
      }
    };
  }

  getFallbackResponse(lang) {
    const fallback = {
      ru: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –≤–∞–º.",
      en: "Thank you for your message! We will definitely help you.",
      es: "¬°Gracias por su mensaje! Definitivamente les ayudaremos."
    };
    return fallback[lang] || fallback.ru;
  }

  getFallbackFinalResponse(lang) {
    const fallback = {
      ru: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤–Ω–∏–∑—É —Å–∞–π—Ç–∞ üìù",
      en: "Please fill out the feedback form at the bottom of the site üìù",
      es: "Por favor completen el formulario de contacto en la parte inferior del sitio üìù"
    };
    return fallback[lang] || fallback.ru;
  }

  getFallbackInterface(lang) {
    const fallback = {
      ru: { title: "–û–Ω–ª–∞–π–Ω-—á–∞—Ç", placeholder: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", sendButton: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", typing: "–ø–µ—á–∞—Ç–∞–µ—Ç..." },
      en: { title: "Live Chat", placeholder: "Type message...", sendButton: "Send", typing: "typing..." },
      es: { title: "Chat en Vivo", placeholder: "Escribe mensaje...", sendButton: "Enviar", typing: "escribiendo..." }
    };
    return fallback[lang] || fallback.ru;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
   */
  getLanguageStats() {
    if (!this.translations) return null;

    const stats = {
      totalLanguages: this.translations.languages,
      supportedLanguages: this.supportedLanguages.length,
      currentLanguage: this.currentLanguage,
      version: this.translations.version
    };

    return stats;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
   */
  async init(defaultLanguage = 'ru') {
    await this.loadTranslations();
    this.setLanguage(defaultLanguage);
    console.log('üöÄ LiveChatTranslations initialized');
    return this;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = LiveChatTranslations;
} else if (typeof window !== 'undefined') {
  window.LiveChatTranslations = LiveChatTranslations;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/*
const translator = new LiveChatTranslations();
await translator.init('ru');

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
const response = translator.getRandomPresetResponse();

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const detectedLang = translator.detectLanguage("Hello world");
translator.setLanguage(detectedLang);

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const interface = translator.getInterface();
console.log(interface.title); // "Live Chat"
*/ 